we can force the remote server to either send us command line access to the server
(a reverse shell), or to open up a port on the server which we can connect to in
 order to execute further commands (a bind shell).


https://web.archive.org/web/20200901140719/http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
https://github.com/swisskyrepo/PayloadsAllTheThings
https://github.com/danielmiessler/SecLists


SHELL Types

At a high level, we are interested in two kinds of shell when it comes to exploiting a target: Reverse shells, and bind shells.

Reverse shells are when the target is forced to execute code that connects back to your computer.
 On your own computer you would use one of the tools mentioned in the previous task to set up a
 listener which would be used to receive the connection. Reverse shells are a good way to bypass
 firewall rules that may prevent you from connecting to arbitrary ports on the target; however,
 the drawback is that, when receiving a shell from a machine across the internet, you would need
 to configure your own network to accept the shell. This, however, will not be a problem on the
 TryHackMe network due to the method by which we connect into the network.

Bind shells are when the code executed on the target is used to start a listener attached to a
shell directly on the target. This would then be opened up to the internet, meaning you can
 connect to the port that the code has opened and obtain remote code execution that way.
  This has the advantage of not requiring any configuration on your own network, but may
  be prevented by firewalls protecting the target.


As a general rule, reverse shells are easier to execute and debug, however, we will
cover both examples below. Don't worry too much about the syntax here: we will be
looking at it in upcoming tasks. Instead notice the difference between reverse and 
bind shells in the following simulations.


sudo rlwrap nc -lvnp 443


Bind shell nc <target-ip> <chosen-port>
